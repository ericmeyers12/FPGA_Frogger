
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000090c memsz 0x0000090c flags r-x
    LOAD off    0x0000192c vaddr 0x1000092c paddr 0x10000f18 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x00002504 vaddr 0x10001504 paddr 0x10001504 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  00001f18  2**0
                  CONTENTS
  2 .text         000008fc  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  1000091c  1000091c  0000191c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  1000092c  10000f18  0000192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  10001504  10001504  00002504  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00001f18  2**0
                  CONTENTS
  7 .sdram        00000000  10001514  10001514  00001f18  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002b0  00000000  00000000  00001f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000039a7  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000116c  00000000  00000000  00005b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000123c  00000000  00000000  00006d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000040c  00000000  00000000  00007f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e8a  00000000  00000000  0000834c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000408  00000000  00000000  000091d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  000095e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000038  00000000  00000000  000095f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000a84b  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000a84e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000a85a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000a85b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000a85c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000a860  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000a864  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000a868  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000a86c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000a870  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000a874  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000032  00000000  00000000  0000a87c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000542e1  00000000  00000000  0000a8ae  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
1000091c l    d  .rodata	00000000 .rodata
1000092c l    d  .rwdata	00000000 .rwdata
10001504 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10001514 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
10000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
10000154 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
100002e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
1000042c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10000ad4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
10000238 g     F .text	0000005c alt_main
10000f18 g       *ABS*	00000000 __flash_rwdata_start
100005ac g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10001510 g     O .bss	00000004 errno
10001508 g     O .bss	00000004 alt_argv
10008ef8 g       *ABS*	00000000 _gp
10000954 g     O .rwdata	00000180 alt_fd_list
1000091c g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000f08 g     O .rwdata	00000004 alt_max_fd
10000f10 g     O .rwdata	00000004 _global_impure_ptr
10001514 g       *ABS*	00000000 __bss_end
1000092c g     O .rwdata	00000028 alt_dev_null
10000410 g     F .text	0000001c alt_dcache_flush_all
10000f18 g       *ABS*	00000000 __ram_rwdata_end
10000f00 g     O .rwdata	00000008 alt_dev_list
1000092c g       *ABS*	00000000 __ram_rodata_end
10001514 g       *ABS*	00000000 end
1000091c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000072c g     F .text	00000194 __call_exitprocs
10000020 g     F .text	0000003c _start
100002c8 g     F .text	00000020 alt_sys_init
10000618 g     F .text	00000114 __register_exitproc
100008c0 g     F .text	00000028 .hidden __mulsi3
1000092c g       *ABS*	00000000 __ram_rwdata_start
1000091c g       *ABS*	00000000 __ram_rodata_start
10001514 g       *ABS*	00000000 __alt_stack_base
10001504 g       *ABS*	00000000 __bss_start
1000005c g     F .text	000000f8 main
1000150c g     O .bss	00000004 alt_envp
10000f0c g     O .rwdata	00000004 alt_errno
1000091c g       *ABS*	00000000 __CTOR_END__
1000091c g       *ABS*	00000000 __flash_rodata_start
1000091c g       *ABS*	00000000 __DTOR_LIST__
10000294 g     F .text	00000034 alt_irq_init
1000052c g     F .text	00000080 alt_release_fd
100005cc g     F .text	00000014 atexit
10000f14 g     O .rwdata	00000004 _impure_ptr
10001504 g     O .bss	00000004 alt_argc
100004b4 g     F .text	0000005c _do_dtors
10000ef8 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10000f18 g       *ABS*	00000000 _edata
10001514 g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
100005e0 g     F .text	00000038 exit
18000000 g       *ABS*	00000000 __alt_data_end
10000000 g       *ABS*	00000000 __alt_mem_sdram
100008e8 g     F .text	00000034 _exit
10000510 g     F .text	0000001c alt_icache_flush_all
10000458 g     F .text	0000005c _do_ctors
10000338 g     F .text	000000d8 close
100001b8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08400814 	ori	at,at,32
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

10000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000020:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000028:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000002c:	d6a3be14 	ori	gp,gp,36600
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000030:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000034:	10854114 	ori	r2,r2,5380

    movhi r3, %hi(__bss_end)
10000038:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000003c:	18c54514 	ori	r3,r3,5396

    beq r2, r3, 1f
10000040:	10c00326 	beq	r2,r3,10000050 <_start+0x30>

0:
    stw zero, (r2)
10000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000004c:	10fffd36 	bltu	r2,r3,10000044 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000050:	00001b80 	call	100001b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000054:	00002380 	call	10000238 <alt_main>

10000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000058:	003fff06 	br	10000058 <__alt_data_end+0xf8000058>

1000005c <main>:
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng
*/

int main()
{
1000005c:	defffa04 	addi	sp,sp,-24
10000060:	df000515 	stw	fp,20(sp)
10000064:	df000504 	addi	fp,sp,20
	volatile unsigned int *LED_PIO = (unsigned int*)0x2050; //make a pointer to access the PIO block
10000068:	00881404 	movi	r2,8272
1000006c:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *SW_PIO = (unsigned int*)0x2040;
10000070:	00881004 	movi	r2,8256
10000074:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int *KEY_PIO = (unsigned int*)0x2030; //Reset
10000078:	00880c04 	movi	r2,8240
1000007c:	e0bfff15 	stw	r2,-4(fp)

	int add_count = 0;
10000080:	e03ffb15 	stw	zero,-20(fp)
	int i = 0;
10000084:	e03ffc15 	stw	zero,-16(fp)

	*LED_PIO = 0; //clear all LEDs
10000088:	e0bffd17 	ldw	r2,-12(fp)
1000008c:	10000015 	stw	zero,0(r2)


	while ( (1+1) != 69)
	{
		if (*KEY_PIO == 0xD) {
10000090:	e0bfff17 	ldw	r2,-4(fp)
10000094:	10800017 	ldw	r2,0(r2)
10000098:	10800358 	cmpnei	r2,r2,13
1000009c:	10000a1e 	bne	r2,zero,100000c8 <main+0x6c>
			add_count += *SW_PIO; //set LSB to ON
100000a0:	e0bffe17 	ldw	r2,-8(fp)
100000a4:	10c00017 	ldw	r3,0(r2)
100000a8:	e0bffb17 	ldw	r2,-20(fp)
100000ac:	1885883a 	add	r2,r3,r2
100000b0:	e0bffb15 	stw	r2,-20(fp)
			while (*KEY_PIO == 0xD);
100000b4:	0001883a 	nop
100000b8:	e0bfff17 	ldw	r2,-4(fp)
100000bc:	10800017 	ldw	r2,0(r2)
100000c0:	10800360 	cmpeqi	r2,r2,13
100000c4:	103ffc1e 	bne	r2,zero,100000b8 <__alt_data_end+0xf80000b8>

		}
		if (*KEY_PIO == 0xE)
100000c8:	e0bfff17 	ldw	r2,-4(fp)
100000cc:	10800017 	ldw	r2,0(r2)
100000d0:	10800398 	cmpnei	r2,r2,14
100000d4:	1000011e 	bne	r2,zero,100000dc <main+0x80>
		{
			add_count = 0;
100000d8:	e03ffb15 	stw	zero,-20(fp)
		}

		for (i = 0; i < 9000; i++); //software delay
100000dc:	e03ffc15 	stw	zero,-16(fp)
100000e0:	00000306 	br	100000f0 <main+0x94>
100000e4:	e0bffc17 	ldw	r2,-16(fp)
100000e8:	10800044 	addi	r2,r2,1
100000ec:	e0bffc15 	stw	r2,-16(fp)
100000f0:	e0bffc17 	ldw	r2,-16(fp)
100000f4:	1088ca10 	cmplti	r2,r2,9000
100000f8:	103ffa1e 	bne	r2,zero,100000e4 <__alt_data_end+0xf80000e4>
		*LED_PIO |= add_count; //set LSB
100000fc:	e0bffd17 	ldw	r2,-12(fp)
10000100:	10c00017 	ldw	r3,0(r2)
10000104:	e0bffb17 	ldw	r2,-20(fp)
10000108:	1886b03a 	or	r3,r3,r2
1000010c:	e0bffd17 	ldw	r2,-12(fp)
10000110:	10c00015 	stw	r3,0(r2)
		for (i = 0; i < 9000; i++); //software delay
10000114:	e03ffc15 	stw	zero,-16(fp)
10000118:	00000306 	br	10000128 <main+0xcc>
1000011c:	e0bffc17 	ldw	r2,-16(fp)
10000120:	10800044 	addi	r2,r2,1
10000124:	e0bffc15 	stw	r2,-16(fp)
10000128:	e0bffc17 	ldw	r2,-16(fp)
1000012c:	1088ca10 	cmplti	r2,r2,9000
10000130:	103ffa1e 	bne	r2,zero,1000011c <__alt_data_end+0xf800011c>
		*LED_PIO &= ~(add_count); //clear LSB
10000134:	e0bffd17 	ldw	r2,-12(fp)
10000138:	10800017 	ldw	r2,0(r2)
1000013c:	e0fffb17 	ldw	r3,-20(fp)
10000140:	00c6303a 	nor	r3,zero,r3
10000144:	10c6703a 	and	r3,r2,r3
10000148:	e0bffd17 	ldw	r2,-12(fp)
1000014c:	10c00015 	stw	r3,0(r2)
	}
10000150:	003fcf06 	br	10000090 <__alt_data_end+0xf8000090>

10000154 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000154:	defffc04 	addi	sp,sp,-16
10000158:	df000315 	stw	fp,12(sp)
1000015c:	df000304 	addi	fp,sp,12
10000160:	e13ffd15 	stw	r4,-12(fp)
10000164:	e17ffe15 	stw	r5,-8(fp)
10000168:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000016c:	e0fffe17 	ldw	r3,-8(fp)
10000170:	e0bffd17 	ldw	r2,-12(fp)
10000174:	18800c26 	beq	r3,r2,100001a8 <alt_load_section+0x54>
  {
    while( to != end )
10000178:	00000806 	br	1000019c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000017c:	e0bffe17 	ldw	r2,-8(fp)
10000180:	10c00104 	addi	r3,r2,4
10000184:	e0fffe15 	stw	r3,-8(fp)
10000188:	e0fffd17 	ldw	r3,-12(fp)
1000018c:	19000104 	addi	r4,r3,4
10000190:	e13ffd15 	stw	r4,-12(fp)
10000194:	18c00017 	ldw	r3,0(r3)
10000198:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000019c:	e0fffe17 	ldw	r3,-8(fp)
100001a0:	e0bfff17 	ldw	r2,-4(fp)
100001a4:	18bff51e 	bne	r3,r2,1000017c <__alt_data_end+0xf800017c>
    {
      *to++ = *from++;
    }
  }
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	df000017 	ldw	fp,0(sp)
100001b0:	dec00104 	addi	sp,sp,4
100001b4:	f800283a 	ret

100001b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100001b8:	defffe04 	addi	sp,sp,-8
100001bc:	dfc00115 	stw	ra,4(sp)
100001c0:	df000015 	stw	fp,0(sp)
100001c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100001c8:	01040034 	movhi	r4,4096
100001cc:	2103c604 	addi	r4,r4,3864
100001d0:	01440034 	movhi	r5,4096
100001d4:	29424b04 	addi	r5,r5,2348
100001d8:	01840034 	movhi	r6,4096
100001dc:	3183c604 	addi	r6,r6,3864
100001e0:	00001540 	call	10000154 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100001e4:	01040034 	movhi	r4,4096
100001e8:	21000804 	addi	r4,r4,32
100001ec:	01440034 	movhi	r5,4096
100001f0:	29400804 	addi	r5,r5,32
100001f4:	01840034 	movhi	r6,4096
100001f8:	31800804 	addi	r6,r6,32
100001fc:	00001540 	call	10000154 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10000200:	01040034 	movhi	r4,4096
10000204:	21024704 	addi	r4,r4,2332
10000208:	01440034 	movhi	r5,4096
1000020c:	29424704 	addi	r5,r5,2332
10000210:	01840034 	movhi	r6,4096
10000214:	31824b04 	addi	r6,r6,2348
10000218:	00001540 	call	10000154 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000021c:	00004100 	call	10000410 <alt_dcache_flush_all>
  alt_icache_flush_all();
10000220:	00005100 	call	10000510 <alt_icache_flush_all>
}
10000224:	e037883a 	mov	sp,fp
10000228:	dfc00117 	ldw	ra,4(sp)
1000022c:	df000017 	ldw	fp,0(sp)
10000230:	dec00204 	addi	sp,sp,8
10000234:	f800283a 	ret

10000238 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10000238:	defffd04 	addi	sp,sp,-12
1000023c:	dfc00215 	stw	ra,8(sp)
10000240:	df000115 	stw	fp,4(sp)
10000244:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000248:	0009883a 	mov	r4,zero
1000024c:	00002940 	call	10000294 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10000250:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000254:	00002c80 	call	100002c8 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10000258:	00004580 	call	10000458 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000025c:	01040034 	movhi	r4,4096
10000260:	21012d04 	addi	r4,r4,1204
10000264:	00005cc0 	call	100005cc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10000268:	d1218317 	ldw	r4,-31220(gp)
1000026c:	d0e18417 	ldw	r3,-31216(gp)
10000270:	d0a18517 	ldw	r2,-31212(gp)
10000274:	180b883a 	mov	r5,r3
10000278:	100d883a 	mov	r6,r2
1000027c:	000005c0 	call	1000005c <main>
10000280:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10000284:	01000044 	movi	r4,1
10000288:	00003380 	call	10000338 <close>
  exit (result);
1000028c:	e13fff17 	ldw	r4,-4(fp)
10000290:	00005e00 	call	100005e0 <exit>

10000294 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10000294:	defffd04 	addi	sp,sp,-12
10000298:	dfc00215 	stw	ra,8(sp)
1000029c:	df000115 	stw	fp,4(sp)
100002a0:	df000104 	addi	fp,sp,4
100002a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
100002a8:	00005ac0 	call	100005ac <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100002ac:	00800044 	movi	r2,1
100002b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100002b4:	e037883a 	mov	sp,fp
100002b8:	dfc00117 	ldw	ra,4(sp)
100002bc:	df000017 	ldw	fp,0(sp)
100002c0:	dec00204 	addi	sp,sp,8
100002c4:	f800283a 	ret

100002c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100002c8:	deffff04 	addi	sp,sp,-4
100002cc:	df000015 	stw	fp,0(sp)
100002d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100002d4:	0001883a 	nop
}
100002d8:	e037883a 	mov	sp,fp
100002dc:	df000017 	ldw	fp,0(sp)
100002e0:	dec00104 	addi	sp,sp,4
100002e4:	f800283a 	ret

100002e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100002e8:	defffe04 	addi	sp,sp,-8
100002ec:	dfc00115 	stw	ra,4(sp)
100002f0:	df000015 	stw	fp,0(sp)
100002f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100002f8:	00840034 	movhi	r2,4096
100002fc:	1083c304 	addi	r2,r2,3852
10000300:	10800017 	ldw	r2,0(r2)
10000304:	10000526 	beq	r2,zero,1000031c <alt_get_errno+0x34>
10000308:	00840034 	movhi	r2,4096
1000030c:	1083c304 	addi	r2,r2,3852
10000310:	10800017 	ldw	r2,0(r2)
10000314:	103ee83a 	callr	r2
10000318:	00000206 	br	10000324 <alt_get_errno+0x3c>
1000031c:	00840034 	movhi	r2,4096
10000320:	10854404 	addi	r2,r2,5392
}
10000324:	e037883a 	mov	sp,fp
10000328:	dfc00117 	ldw	ra,4(sp)
1000032c:	df000017 	ldw	fp,0(sp)
10000330:	dec00204 	addi	sp,sp,8
10000334:	f800283a 	ret

10000338 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10000338:	defffb04 	addi	sp,sp,-20
1000033c:	dfc00415 	stw	ra,16(sp)
10000340:	df000315 	stw	fp,12(sp)
10000344:	df000304 	addi	fp,sp,12
10000348:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000034c:	e0bfff17 	ldw	r2,-4(fp)
10000350:	10000816 	blt	r2,zero,10000374 <close+0x3c>
10000354:	e13fff17 	ldw	r4,-4(fp)
10000358:	01400304 	movi	r5,12
1000035c:	00008c00 	call	100008c0 <__mulsi3>
10000360:	1007883a 	mov	r3,r2
10000364:	00840034 	movhi	r2,4096
10000368:	10825504 	addi	r2,r2,2388
1000036c:	1885883a 	add	r2,r3,r2
10000370:	00000106 	br	10000378 <close+0x40>
10000374:	0005883a 	mov	r2,zero
10000378:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000037c:	e0bffd17 	ldw	r2,-12(fp)
10000380:	10001926 	beq	r2,zero,100003e8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10000384:	e0bffd17 	ldw	r2,-12(fp)
10000388:	10800017 	ldw	r2,0(r2)
1000038c:	10800417 	ldw	r2,16(r2)
10000390:	10000626 	beq	r2,zero,100003ac <close+0x74>
10000394:	e0bffd17 	ldw	r2,-12(fp)
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	10800417 	ldw	r2,16(r2)
100003a0:	e13ffd17 	ldw	r4,-12(fp)
100003a4:	103ee83a 	callr	r2
100003a8:	00000106 	br	100003b0 <close+0x78>
100003ac:	0005883a 	mov	r2,zero
100003b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100003b4:	e13fff17 	ldw	r4,-4(fp)
100003b8:	000052c0 	call	1000052c <alt_release_fd>
    if (rval < 0)
100003bc:	e0bffe17 	ldw	r2,-8(fp)
100003c0:	1000070e 	bge	r2,zero,100003e0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100003c4:	00002e80 	call	100002e8 <alt_get_errno>
100003c8:	1007883a 	mov	r3,r2
100003cc:	e0bffe17 	ldw	r2,-8(fp)
100003d0:	0085c83a 	sub	r2,zero,r2
100003d4:	18800015 	stw	r2,0(r3)
      return -1;
100003d8:	00bfffc4 	movi	r2,-1
100003dc:	00000706 	br	100003fc <close+0xc4>
    }
    return 0;
100003e0:	0005883a 	mov	r2,zero
100003e4:	00000506 	br	100003fc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100003e8:	00002e80 	call	100002e8 <alt_get_errno>
100003ec:	1007883a 	mov	r3,r2
100003f0:	00801444 	movi	r2,81
100003f4:	18800015 	stw	r2,0(r3)
    return -1;
100003f8:	00bfffc4 	movi	r2,-1
  }
}
100003fc:	e037883a 	mov	sp,fp
10000400:	dfc00117 	ldw	ra,4(sp)
10000404:	df000017 	ldw	fp,0(sp)
10000408:	dec00204 	addi	sp,sp,8
1000040c:	f800283a 	ret

10000410 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10000410:	deffff04 	addi	sp,sp,-4
10000414:	df000015 	stw	fp,0(sp)
10000418:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000041c:	e037883a 	mov	sp,fp
10000420:	df000017 	ldw	fp,0(sp)
10000424:	dec00104 	addi	sp,sp,4
10000428:	f800283a 	ret

1000042c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000042c:	defffc04 	addi	sp,sp,-16
10000430:	df000315 	stw	fp,12(sp)
10000434:	df000304 	addi	fp,sp,12
10000438:	e13ffd15 	stw	r4,-12(fp)
1000043c:	e17ffe15 	stw	r5,-8(fp)
10000440:	e1bfff15 	stw	r6,-4(fp)
  return len;
10000444:	e0bfff17 	ldw	r2,-4(fp)
}
10000448:	e037883a 	mov	sp,fp
1000044c:	df000017 	ldw	fp,0(sp)
10000450:	dec00104 	addi	sp,sp,4
10000454:	f800283a 	ret

10000458 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10000458:	defffd04 	addi	sp,sp,-12
1000045c:	dfc00215 	stw	ra,8(sp)
10000460:	df000115 	stw	fp,4(sp)
10000464:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000468:	00840034 	movhi	r2,4096
1000046c:	10824604 	addi	r2,r2,2328
10000470:	e0bfff15 	stw	r2,-4(fp)
10000474:	00000606 	br	10000490 <_do_ctors+0x38>
        (*ctor) (); 
10000478:	e0bfff17 	ldw	r2,-4(fp)
1000047c:	10800017 	ldw	r2,0(r2)
10000480:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000484:	e0bfff17 	ldw	r2,-4(fp)
10000488:	10bfff04 	addi	r2,r2,-4
1000048c:	e0bfff15 	stw	r2,-4(fp)
10000490:	e0ffff17 	ldw	r3,-4(fp)
10000494:	00840034 	movhi	r2,4096
10000498:	10824704 	addi	r2,r2,2332
1000049c:	18bff62e 	bgeu	r3,r2,10000478 <__alt_data_end+0xf8000478>
        (*ctor) (); 
}
100004a0:	e037883a 	mov	sp,fp
100004a4:	dfc00117 	ldw	ra,4(sp)
100004a8:	df000017 	ldw	fp,0(sp)
100004ac:	dec00204 	addi	sp,sp,8
100004b0:	f800283a 	ret

100004b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100004b4:	defffd04 	addi	sp,sp,-12
100004b8:	dfc00215 	stw	ra,8(sp)
100004bc:	df000115 	stw	fp,4(sp)
100004c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100004c4:	00840034 	movhi	r2,4096
100004c8:	10824604 	addi	r2,r2,2328
100004cc:	e0bfff15 	stw	r2,-4(fp)
100004d0:	00000606 	br	100004ec <_do_dtors+0x38>
        (*dtor) (); 
100004d4:	e0bfff17 	ldw	r2,-4(fp)
100004d8:	10800017 	ldw	r2,0(r2)
100004dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100004e0:	e0bfff17 	ldw	r2,-4(fp)
100004e4:	10bfff04 	addi	r2,r2,-4
100004e8:	e0bfff15 	stw	r2,-4(fp)
100004ec:	e0ffff17 	ldw	r3,-4(fp)
100004f0:	00840034 	movhi	r2,4096
100004f4:	10824704 	addi	r2,r2,2332
100004f8:	18bff62e 	bgeu	r3,r2,100004d4 <__alt_data_end+0xf80004d4>
        (*dtor) (); 
}
100004fc:	e037883a 	mov	sp,fp
10000500:	dfc00117 	ldw	ra,4(sp)
10000504:	df000017 	ldw	fp,0(sp)
10000508:	dec00204 	addi	sp,sp,8
1000050c:	f800283a 	ret

10000510 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10000510:	deffff04 	addi	sp,sp,-4
10000514:	df000015 	stw	fp,0(sp)
10000518:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000051c:	e037883a 	mov	sp,fp
10000520:	df000017 	ldw	fp,0(sp)
10000524:	dec00104 	addi	sp,sp,4
10000528:	f800283a 	ret

1000052c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000052c:	defffc04 	addi	sp,sp,-16
10000530:	dfc00315 	stw	ra,12(sp)
10000534:	df000215 	stw	fp,8(sp)
10000538:	dc000115 	stw	r16,4(sp)
1000053c:	df000204 	addi	fp,sp,8
10000540:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10000544:	e0bffe17 	ldw	r2,-8(fp)
10000548:	108000d0 	cmplti	r2,r2,3
1000054c:	1000111e 	bne	r2,zero,10000594 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10000550:	04040034 	movhi	r16,4096
10000554:	84025504 	addi	r16,r16,2388
10000558:	e0bffe17 	ldw	r2,-8(fp)
1000055c:	1009883a 	mov	r4,r2
10000560:	01400304 	movi	r5,12
10000564:	00008c00 	call	100008c0 <__mulsi3>
10000568:	8085883a 	add	r2,r16,r2
1000056c:	10800204 	addi	r2,r2,8
10000570:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10000574:	04040034 	movhi	r16,4096
10000578:	84025504 	addi	r16,r16,2388
1000057c:	e0bffe17 	ldw	r2,-8(fp)
10000580:	1009883a 	mov	r4,r2
10000584:	01400304 	movi	r5,12
10000588:	00008c00 	call	100008c0 <__mulsi3>
1000058c:	8085883a 	add	r2,r16,r2
10000590:	10000015 	stw	zero,0(r2)
  }
}
10000594:	e6ffff04 	addi	sp,fp,-4
10000598:	dfc00217 	ldw	ra,8(sp)
1000059c:	df000117 	ldw	fp,4(sp)
100005a0:	dc000017 	ldw	r16,0(sp)
100005a4:	dec00304 	addi	sp,sp,12
100005a8:	f800283a 	ret

100005ac <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100005ac:	deffff04 	addi	sp,sp,-4
100005b0:	df000015 	stw	fp,0(sp)
100005b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100005b8:	000170fa 	wrctl	ienable,zero
}
100005bc:	e037883a 	mov	sp,fp
100005c0:	df000017 	ldw	fp,0(sp)
100005c4:	dec00104 	addi	sp,sp,4
100005c8:	f800283a 	ret

100005cc <atexit>:
100005cc:	200b883a 	mov	r5,r4
100005d0:	000d883a 	mov	r6,zero
100005d4:	0009883a 	mov	r4,zero
100005d8:	000f883a 	mov	r7,zero
100005dc:	00006181 	jmpi	10000618 <__register_exitproc>

100005e0 <exit>:
100005e0:	defffe04 	addi	sp,sp,-8
100005e4:	000b883a 	mov	r5,zero
100005e8:	dc000015 	stw	r16,0(sp)
100005ec:	dfc00115 	stw	ra,4(sp)
100005f0:	2021883a 	mov	r16,r4
100005f4:	000072c0 	call	1000072c <__call_exitprocs>
100005f8:	00840034 	movhi	r2,4096
100005fc:	1083c404 	addi	r2,r2,3856
10000600:	11000017 	ldw	r4,0(r2)
10000604:	20800f17 	ldw	r2,60(r4)
10000608:	10000126 	beq	r2,zero,10000610 <exit+0x30>
1000060c:	103ee83a 	callr	r2
10000610:	8009883a 	mov	r4,r16
10000614:	00008e80 	call	100008e8 <_exit>

10000618 <__register_exitproc>:
10000618:	00840034 	movhi	r2,4096
1000061c:	defffa04 	addi	sp,sp,-24
10000620:	1083c404 	addi	r2,r2,3856
10000624:	dc000315 	stw	r16,12(sp)
10000628:	14000017 	ldw	r16,0(r2)
1000062c:	dc400415 	stw	r17,16(sp)
10000630:	dfc00515 	stw	ra,20(sp)
10000634:	80805217 	ldw	r2,328(r16)
10000638:	2023883a 	mov	r17,r4
1000063c:	10003626 	beq	r2,zero,10000718 <__register_exitproc+0x100>
10000640:	10c00117 	ldw	r3,4(r2)
10000644:	010007c4 	movi	r4,31
10000648:	20c00e16 	blt	r4,r3,10000684 <__register_exitproc+0x6c>
1000064c:	1a400044 	addi	r9,r3,1
10000650:	8800211e 	bne	r17,zero,100006d8 <__register_exitproc+0xc0>
10000654:	18c00084 	addi	r3,r3,2
10000658:	18c7883a 	add	r3,r3,r3
1000065c:	18c7883a 	add	r3,r3,r3
10000660:	12400115 	stw	r9,4(r2)
10000664:	10c7883a 	add	r3,r2,r3
10000668:	19400015 	stw	r5,0(r3)
1000066c:	0005883a 	mov	r2,zero
10000670:	dfc00517 	ldw	ra,20(sp)
10000674:	dc400417 	ldw	r17,16(sp)
10000678:	dc000317 	ldw	r16,12(sp)
1000067c:	dec00604 	addi	sp,sp,24
10000680:	f800283a 	ret
10000684:	00800034 	movhi	r2,0
10000688:	10800004 	addi	r2,r2,0
1000068c:	10002526 	beq	r2,zero,10000724 <__register_exitproc+0x10c>
10000690:	01006404 	movi	r4,400
10000694:	d9400015 	stw	r5,0(sp)
10000698:	d9800115 	stw	r6,4(sp)
1000069c:	d9c00215 	stw	r7,8(sp)
100006a0:	00000000 	call	10000000 <__reset>
100006a4:	d9400017 	ldw	r5,0(sp)
100006a8:	d9800117 	ldw	r6,4(sp)
100006ac:	d9c00217 	ldw	r7,8(sp)
100006b0:	10001c26 	beq	r2,zero,10000724 <__register_exitproc+0x10c>
100006b4:	80c05217 	ldw	r3,328(r16)
100006b8:	10000115 	stw	zero,4(r2)
100006bc:	02400044 	movi	r9,1
100006c0:	10c00015 	stw	r3,0(r2)
100006c4:	80805215 	stw	r2,328(r16)
100006c8:	10006215 	stw	zero,392(r2)
100006cc:	10006315 	stw	zero,396(r2)
100006d0:	0007883a 	mov	r3,zero
100006d4:	883fdf26 	beq	r17,zero,10000654 <__alt_data_end+0xf8000654>
100006d8:	18d1883a 	add	r8,r3,r3
100006dc:	4211883a 	add	r8,r8,r8
100006e0:	1211883a 	add	r8,r2,r8
100006e4:	41802215 	stw	r6,136(r8)
100006e8:	01000044 	movi	r4,1
100006ec:	11806217 	ldw	r6,392(r2)
100006f0:	20c8983a 	sll	r4,r4,r3
100006f4:	310cb03a 	or	r6,r6,r4
100006f8:	11806215 	stw	r6,392(r2)
100006fc:	41c04215 	stw	r7,264(r8)
10000700:	01800084 	movi	r6,2
10000704:	89bfd31e 	bne	r17,r6,10000654 <__alt_data_end+0xf8000654>
10000708:	11806317 	ldw	r6,396(r2)
1000070c:	3108b03a 	or	r4,r6,r4
10000710:	11006315 	stw	r4,396(r2)
10000714:	003fcf06 	br	10000654 <__alt_data_end+0xf8000654>
10000718:	80805304 	addi	r2,r16,332
1000071c:	80805215 	stw	r2,328(r16)
10000720:	003fc706 	br	10000640 <__alt_data_end+0xf8000640>
10000724:	00bfffc4 	movi	r2,-1
10000728:	003fd106 	br	10000670 <__alt_data_end+0xf8000670>

1000072c <__call_exitprocs>:
1000072c:	00840034 	movhi	r2,4096
10000730:	1083c404 	addi	r2,r2,3856
10000734:	10800017 	ldw	r2,0(r2)
10000738:	defff404 	addi	sp,sp,-48
1000073c:	dd800815 	stw	r22,32(sp)
10000740:	d8800015 	stw	r2,0(sp)
10000744:	10805204 	addi	r2,r2,328
10000748:	dd000615 	stw	r20,24(sp)
1000074c:	dc800415 	stw	r18,16(sp)
10000750:	dfc00b15 	stw	ra,44(sp)
10000754:	df000a15 	stw	fp,40(sp)
10000758:	ddc00915 	stw	r23,36(sp)
1000075c:	dd400715 	stw	r21,28(sp)
10000760:	dcc00515 	stw	r19,20(sp)
10000764:	dc400315 	stw	r17,12(sp)
10000768:	dc000215 	stw	r16,8(sp)
1000076c:	2025883a 	mov	r18,r4
10000770:	2829883a 	mov	r20,r5
10000774:	d8800115 	stw	r2,4(sp)
10000778:	05bfffc4 	movi	r22,-1
1000077c:	d8800017 	ldw	r2,0(sp)
10000780:	14c05217 	ldw	r19,328(r2)
10000784:	98001d26 	beq	r19,zero,100007fc <__call_exitprocs+0xd0>
10000788:	dd400117 	ldw	r21,4(sp)
1000078c:	98800117 	ldw	r2,4(r19)
10000790:	173fffc4 	addi	fp,r2,-1
10000794:	e0000d16 	blt	fp,zero,100007cc <__call_exitprocs+0xa0>
10000798:	14000044 	addi	r16,r2,1
1000079c:	8421883a 	add	r16,r16,r16
100007a0:	8421883a 	add	r16,r16,r16
100007a4:	84402004 	addi	r17,r16,128
100007a8:	9c63883a 	add	r17,r19,r17
100007ac:	9c21883a 	add	r16,r19,r16
100007b0:	a0001e26 	beq	r20,zero,1000082c <__call_exitprocs+0x100>
100007b4:	80804017 	ldw	r2,256(r16)
100007b8:	15001c26 	beq	r2,r20,1000082c <__call_exitprocs+0x100>
100007bc:	e73fffc4 	addi	fp,fp,-1
100007c0:	843fff04 	addi	r16,r16,-4
100007c4:	8c7fff04 	addi	r17,r17,-4
100007c8:	e5bff91e 	bne	fp,r22,100007b0 <__alt_data_end+0xf80007b0>
100007cc:	00800034 	movhi	r2,0
100007d0:	10800004 	addi	r2,r2,0
100007d4:	10000926 	beq	r2,zero,100007fc <__call_exitprocs+0xd0>
100007d8:	98800117 	ldw	r2,4(r19)
100007dc:	1000311e 	bne	r2,zero,100008a4 <__call_exitprocs+0x178>
100007e0:	98800017 	ldw	r2,0(r19)
100007e4:	10003426 	beq	r2,zero,100008b8 <__call_exitprocs+0x18c>
100007e8:	9809883a 	mov	r4,r19
100007ec:	a8800015 	stw	r2,0(r21)
100007f0:	00000000 	call	10000000 <__reset>
100007f4:	acc00017 	ldw	r19,0(r21)
100007f8:	983fe41e 	bne	r19,zero,1000078c <__alt_data_end+0xf800078c>
100007fc:	dfc00b17 	ldw	ra,44(sp)
10000800:	df000a17 	ldw	fp,40(sp)
10000804:	ddc00917 	ldw	r23,36(sp)
10000808:	dd800817 	ldw	r22,32(sp)
1000080c:	dd400717 	ldw	r21,28(sp)
10000810:	dd000617 	ldw	r20,24(sp)
10000814:	dcc00517 	ldw	r19,20(sp)
10000818:	dc800417 	ldw	r18,16(sp)
1000081c:	dc400317 	ldw	r17,12(sp)
10000820:	dc000217 	ldw	r16,8(sp)
10000824:	dec00c04 	addi	sp,sp,48
10000828:	f800283a 	ret
1000082c:	98800117 	ldw	r2,4(r19)
10000830:	80c00017 	ldw	r3,0(r16)
10000834:	10bfffc4 	addi	r2,r2,-1
10000838:	17001526 	beq	r2,fp,10000890 <__call_exitprocs+0x164>
1000083c:	80000015 	stw	zero,0(r16)
10000840:	183fde26 	beq	r3,zero,100007bc <__alt_data_end+0xf80007bc>
10000844:	00800044 	movi	r2,1
10000848:	1708983a 	sll	r4,r2,fp
1000084c:	98806217 	ldw	r2,392(r19)
10000850:	9dc00117 	ldw	r23,4(r19)
10000854:	2084703a 	and	r2,r4,r2
10000858:	1000061e 	bne	r2,zero,10000874 <__call_exitprocs+0x148>
1000085c:	183ee83a 	callr	r3
10000860:	98800117 	ldw	r2,4(r19)
10000864:	15ffc51e 	bne	r2,r23,1000077c <__alt_data_end+0xf800077c>
10000868:	a8800017 	ldw	r2,0(r21)
1000086c:	14ffd326 	beq	r2,r19,100007bc <__alt_data_end+0xf80007bc>
10000870:	003fc206 	br	1000077c <__alt_data_end+0xf800077c>
10000874:	98806317 	ldw	r2,396(r19)
10000878:	2084703a 	and	r2,r4,r2
1000087c:	1000061e 	bne	r2,zero,10000898 <__call_exitprocs+0x16c>
10000880:	89400017 	ldw	r5,0(r17)
10000884:	9009883a 	mov	r4,r18
10000888:	183ee83a 	callr	r3
1000088c:	003ff406 	br	10000860 <__alt_data_end+0xf8000860>
10000890:	9f000115 	stw	fp,4(r19)
10000894:	003fea06 	br	10000840 <__alt_data_end+0xf8000840>
10000898:	89000017 	ldw	r4,0(r17)
1000089c:	183ee83a 	callr	r3
100008a0:	003fef06 	br	10000860 <__alt_data_end+0xf8000860>
100008a4:	98800017 	ldw	r2,0(r19)
100008a8:	982b883a 	mov	r21,r19
100008ac:	1027883a 	mov	r19,r2
100008b0:	983fb61e 	bne	r19,zero,1000078c <__alt_data_end+0xf800078c>
100008b4:	003fd106 	br	100007fc <__alt_data_end+0xf80007fc>
100008b8:	0005883a 	mov	r2,zero
100008bc:	003ffa06 	br	100008a8 <__alt_data_end+0xf80008a8>

100008c0 <__mulsi3>:
100008c0:	0005883a 	mov	r2,zero
100008c4:	20000726 	beq	r4,zero,100008e4 <__mulsi3+0x24>
100008c8:	20c0004c 	andi	r3,r4,1
100008cc:	2008d07a 	srli	r4,r4,1
100008d0:	18000126 	beq	r3,zero,100008d8 <__mulsi3+0x18>
100008d4:	1145883a 	add	r2,r2,r5
100008d8:	294b883a 	add	r5,r5,r5
100008dc:	203ffa1e 	bne	r4,zero,100008c8 <__alt_data_end+0xf80008c8>
100008e0:	f800283a 	ret
100008e4:	f800283a 	ret

100008e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100008e8:	defffd04 	addi	sp,sp,-12
100008ec:	df000215 	stw	fp,8(sp)
100008f0:	df000204 	addi	fp,sp,8
100008f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100008f8:	0001883a 	nop
100008fc:	e0bfff17 	ldw	r2,-4(fp)
10000900:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10000904:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10000908:	10000226 	beq	r2,zero,10000914 <_exit+0x2c>
    ALT_SIM_FAIL();
1000090c:	002af070 	cmpltui	zero,zero,43969
10000910:	00000106 	br	10000918 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10000914:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10000918:	003fff06 	br	10000918 <__alt_data_end+0xf8000918>
